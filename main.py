#!/usr/bin/env python
"""Pure Python command line Snake game."""

import curses
import argparse
import signal

from state import Game
from state import Test
from state.hiscore import HighScore
from utils.errors import WindowSizeError

WIDTH = 80
HEIGHT = 24

SAVE_FOLDER = "snakey"


def setup_curses():
    """Set up the colours and cursor visibility."""
    curses.curs_set(0)
    curses.start_color()
    curses.use_default_colors()


def unset_curses(old_cursor: int):
    """Set the cursor visibility back to the previous state.

    :param old_cursor: The old state of the cursor's visibility.
    """
    curses.curs_set(old_cursor)


def check_boundaries(window: curses.window, height: int, width: int):
    """Make sure the window is big enough for the game.

    :param window: The default window generated by curses on initialization.
    :param height: The minimum height the game needs.
    :param width: The minimum width the game needs.

    :raises WindowSizeError: When the window is too small in either dimension.
    """
    max_y, max_x = window.getmaxyx()
    if max_y < height or max_x < width:
        raise WindowSizeError(
            "Window dimensions are too small. Must be at least "
            f"{width} wide by {height} high"
        )


def resize(window: curses.window, height: int, width: int):
    """Custom resize function to lock the window dimensions properly.

    :param window: Base curses window.
    :param height: Height of the window.
    :param width: Width of the window.
    """
    window.resize(height, width)


def run(
    window: curses.window,
    width: int = WIDTH,
    height: int = HEIGHT,
    test: bool = False
):
    """The core game function that runs in a curses wrapper.

    :param window: The game window.
    :param width: Width of the game window.
    :param height: Height of the game window.
    :param test: Whether or not to launch the test state.
    """
    setup_curses()
    check_boundaries(window, height, width)
    signal.signal(
        signal.SIGWINCH,
        lambda *_: resize(window, height, width)
    )

    # run the tests and immediately quit
    if test:
        Test(width, height, fps=10).run()
        Test(width, height, no_delay=False).run()
        return

    replay = True
    while replay:
        game = Game(width, height, 10)
        game.run()

        high_score = HighScore(
            width,
            height,
            game.score,
            SAVE_FOLDER
        )
        high_score.run()
        replay = high_score.replay


def main():
    """Main command line entrypoint"""
    # capture and save the default cursor visibility
    curses.initscr()
    old_cursor = curses.curs_set(0)
    curses.curs_set(old_cursor)
    curses.endwin()

    # command line options
    parser = argparse.ArgumentParser("Snake game.")
    parser.add_argument("-t", "--test", action="store_true")
    args = parser.parse_args()

    try:
        curses.wrapper(
            run,
            *args._get_args(),
            **dict(args._get_kwargs())
        )
    except WindowSizeError as err:
        print(err)
    finally:
        unset_curses(old_cursor)

if __name__ == "__main__":
    main()
